/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Ventana;

import Database.Database;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *  Clase ventana que permitira editar a los privilegios de los usuarios.
 * @author Ramon Lopez
 */
public class editarPrivilegiosTabla extends javax.swing.JDialog {
    
    Database db;
    /**
     * Creates new form editarPrivilegiosTabla
     */
    public editarPrivilegiosTabla(java.awt.Frame parent, boolean modal,Database db) {
        super(parent, modal);
        this.db = db;
        initComponents();
        buildComboTablas();
        buildComboUsuarios();
        setLocationRelativeTo(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        comboBoxTablas = new javax.swing.JComboBox<>();
        comboBoxUsuarios = new javax.swing.JComboBox<>();
        checkBoxSelect = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        checkBoxInsert = new javax.swing.JCheckBox();
        checkBoxUpdate = new javax.swing.JCheckBox();
        checkBoxDelete = new javax.swing.JCheckBox();
        checkBoxAll = new javax.swing.JCheckBox();
        checkBoxRule = new javax.swing.JCheckBox();
        botonActualizar = new javax.swing.JButton();
        botonCancelar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel1.setText("Seleccionar tabla:");

        jLabel2.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel2.setText("Seleccionar usuario:");

        comboBoxTablas.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        comboBoxUsuarios.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N

        checkBoxSelect.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkBoxSelect.setText("SELECT");

        jLabel3.setFont(new java.awt.Font("Arial", 0, 14)); // NOI18N
        jLabel3.setText("Selecciona los privilegios:");

        checkBoxInsert.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkBoxInsert.setText("INSERT");

        checkBoxUpdate.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkBoxUpdate.setText("UPDATE");

        checkBoxDelete.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkBoxDelete.setText("DELETE");

        checkBoxAll.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkBoxAll.setText("ALL");

        checkBoxRule.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        checkBoxRule.setText("RULE");

        botonActualizar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        botonActualizar.setText("Actualizar privilegios");
        botonActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonActualizarActionPerformed(evt);
            }
        });

        botonCancelar.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        botonCancelar.setText("Cancelar");
        botonCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonCancelarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(jLabel1))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2)))
                        .addGap(53, 53, 53)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(comboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(comboBoxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, 229, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(308, 308, 308)
                        .addComponent(botonCancelar))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(botonActualizar)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxSelect)
                    .addComponent(checkBoxDelete))
                .addGap(59, 59, 59)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxInsert)
                    .addComponent(checkBoxRule))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(checkBoxAll)
                    .addComponent(checkBoxUpdate))
                .addGap(84, 84, 84))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboBoxTablas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(comboBoxUsuarios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(38, 38, 38)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxSelect)
                    .addComponent(checkBoxInsert)
                    .addComponent(checkBoxUpdate))
                .addGap(49, 49, 49)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkBoxDelete)
                    .addComponent(checkBoxAll)
                    .addComponent(checkBoxRule))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(botonActualizar)
                    .addComponent(botonCancelar))
                .addGap(36, 36, 36))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botonActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonActualizarActionPerformed
        String usuario = comboBoxUsuarios.getSelectedItem().toString();
        String tabla = comboBoxTablas.getSelectedItem().toString();

        //seleccion de privilegios
        if (checkBoxAll.isSelected() == true) {
            String sql = "GRANT ALL ON " + tabla + " TO " + usuario + ";";
            updateDatabase(sql);
        }else{
            if (checkBoxDelete.isSelected()) {
                String sql = "GRANT DELETE ON " + tabla + " TO " + usuario + ";";
                updateDatabase(sql);
            }
            if (checkBoxInsert.isSelected()) {
                String sql = "GRANT INSERT ON " + tabla + " TO " + usuario + ";";
                updateDatabase(sql);
            }
            if (checkBoxRule.isSelected()) {
                String sql = "GRANT RULE ON " + tabla + " TO " + usuario + ";";
                updateDatabase(sql);
            }
            if (checkBoxSelect.isSelected()) {
                String sql = "GRANT ALL SELECT " + tabla + " TO " + usuario + ";";
                updateDatabase(sql);
            }
            if (checkBoxUpdate.isSelected()) {
                String sql = "GRANT UPDATE ON " + usuario + " TO " + tabla + ";";
                updateDatabase(sql);
            }
        }

    }//GEN-LAST:event_botonActualizarActionPerformed

    private void botonCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonCancelarActionPerformed
        dispose();
    }//GEN-LAST:event_botonCancelarActionPerformed

    /**
     * Metodo que actualiza la base de datos
     * @param sql recibira el codigo sql que se mandara a la base de datos para
     * su ejecucion
     */
    private void updateDatabase(String sql){
        //mandamos la actualizacion
        try {
            db.update(sql);
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    /**
     * Metodo que realizara la consulta de los usuarios registrados en la base 
     * de datos. Estos datos se almacenaran en el comboBox comboBoxUsuarios.
     */
    private void buildComboUsuarios() {
        final String sql = "SELECT * FROM \"pg_authid\" WHERE rolcanlogin = true;";
        ResultSet rs = null;
        try {
            // Enviar consulta a la base de datos
            rs = db.query(sql);
            while (rs.next()) {
                
                //obtenemos los datos de la base de datos
                String nombre = rs.getString(2);
                
                // Agregar nombre del proveedor al combo
                if (!nombre.equals("postgres")) {
                    comboBoxUsuarios.addItem(nombre);
                }
                //System.out.println(label);

            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
    }
    
    /**
     * Metodo que realizara la consulta sobre las tablas que esten en la base de
     * datos, estas tablas se guardaran en el comboBox comboBoxTablas
     */
    private void buildComboTablas() {
        final String sql = "SELECT * FROM pg_catalog.pg_tables WHERE schemaname = 'public';";
        ResultSet rs = null;
        try {
            // Enviar consulta a la base de datos
            rs = db.query(sql);
            while (rs.next()) {
                
                //obtenemos los datos de la base de datos
                String nombreTabla = rs.getString(2);
                System.out.println(nombreTabla);
                comboBoxTablas.addItem(nombreTabla);
                
            }
        } catch (SQLException ex) {
            System.out.println(ex.getMessage());
        }
        
        comboBoxTablas.addItem("ALL TABLES");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botonActualizar;
    private javax.swing.JButton botonCancelar;
    private javax.swing.JCheckBox checkBoxAll;
    private javax.swing.JCheckBox checkBoxDelete;
    private javax.swing.JCheckBox checkBoxInsert;
    private javax.swing.JCheckBox checkBoxRule;
    private javax.swing.JCheckBox checkBoxSelect;
    private javax.swing.JCheckBox checkBoxUpdate;
    private javax.swing.JComboBox<String> comboBoxTablas;
    private javax.swing.JComboBox<String> comboBoxUsuarios;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
